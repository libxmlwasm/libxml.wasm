name: Build and Test

on:
  push:
    paths-ignore:
      - 'README.md'
  workflow_dispatch:
    inputs:
      skip-build-image:
        description: Skip building the builder image
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-image:
    name: Preapre builder image
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip-build-image }}
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}/builder
        tags: |
          type=raw,value=latest
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
        labels: |
          org.opencontainers.image.title=Builder
          org.opencontainers.image.description=Builder image for libxmlwasm
          org.opencontainers.image.source=${{ github.repository }}
    - name: Prepare container
      uses: docker/build-push-action@v5
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        pull: true
  build:
    name: Build and test
    runs-on: ubuntu-latest
    needs: build-image
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
    - name: Build
      run: |
        mkdir -p prefix dist wasm-build cache
        chmod o+w prefix dist wasm-build cache
        docker compose up ci --no-build
    # - name: Check files
    #   run: ls . */
    - name: Install dependencies
      run: corepack pnpm install --immutable
    - name: Run tests
      run: corepack pnpm test
    - name: Create package tarball
      run: corepack pnpm pack -o libxmlwasm.tgz
    - name: Upload package tarball
      uses: actions/upload-artifact@v4
      with:
        name: libxmlwasm.tgz
        path: libxmlwasm.tgz
  publish_github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
    - name: Download package tarball
      uses: actions/download-artifact@v4
      with:
        name: libxmlwasm.tgz
    - name: Unpack package tarball
      run: |
        tar axf libxmlwasm.tgz
        mv package/* .
    - name: Login to GitHub Packages
      run: |
        corepack yarn set npmScopes.libxmlwasm.npmAuthToken ${{ secrets.GITHUB_TOKEN }}
        cat ./.yarnrc.yml
        corepack yarn npm whoami --scope "${{ github.repository_owner }}"
    - name: Prepare package
      id: package
      run: |
        ./scripts/jqout.sh '.name="@${{ github.repository_owner }}/wasm"' package.json
        ./scripts/jqout.sh '.version+="-${{ github.ref_name }}-${{ github.sha }}"' package.json
        echo "name=$(jq .name package.json)" >> $GITHUB_OUTPUT
        echo "version=$(jq .version package.json)" >> $GITHUB_OUTPUT
    - name: Publish package
      run: |
        corepack yarn npm tag add ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} experimental
        corepack yarn npm publish --access public --tag experimental
